-R can be very wasteful of RAM (You can examine memory usage and memory changes using the pryr package)
In R, all objects are immutable, so whenever you modify an object, you are actually creating a new object
-Three dots, e.g. print(x, ...). In technical language, this is called an ellipsis. And it means that the function is designed to take any number of named or unnamed arguments.
How do you write functions that make use of ellipsis? You simply convert the … to a list, like so:
HelloWorld <- function(...) {
  arguments <- list(...)
  paste(arguments)
}
HelloWorld("Hello", "World", "!")

-When you do want to insert a <br /> break tag using Markdown, you end a line with two or more spaces, then type return.
You can also use the <br> tag
-When you need to use the same random numbers across several part of Rmarkdown, r chunk can be cached
-Division will return a floating-point number even if both its operands are integers
-R always works on vectors (a single number is a vector with length = 1)
-infix operators = classic math: infix addition = 1 + 2 (nothing special)
-If you read more about R you will soon run into the statement that loops are slow in R (there are typically better solutions in R than to use an explicit loop statement)
-R is a so-called functional language (among other things) and in functional languages, you typically don’t use loops
-There is a separate assignment operator, <<-, you can use for that. It will not create a new local variable but instead search outward to find an existing variable and assign to that. If it gets all the way to the outermost global scope, though, it will create the variable there if it doesn’t already exist. (this can be used for simple getter + setter for example)

=============================
literate programming - The idea in literate programming is that the documentation of a program—in the sense of the documentation of how the program works and how algorithms and data structures in the program works—is written together with the code implementing the program
- R Markdown (for writing these documents) and knitr (for running the analysis and generating the reports)
- knitr takes the markdown document, translates it into HTML file and opens it (the HTML file is saved)
- if you give r code chunks a name, they are easily located by clicking on the structure button in the bar below the document
- if a package is loaded into current project, it's functions will work when a chunk of code is run. But if knit is used to build HTML from the markdown file, the import of that file needs to be specifically done in the markdown file (library(package))

factors
-It is not strictly necessary to specify the levels in the factor() call, but I prefer always to do so explicitly. If there is an unexpected string in the input to factor(), it would end up being one of the levels, and I wouldn’t know about it until much later. Specifying the levels explicitly alleviates that problem.

magrittr
- lhs %>% rhs: Pipe an object forward into a function or call expression
- lhs %<>% rhs: Pipe an object forward into a function or call expression and update the lhs object with the resulting value
- lhs %T>% rhs: Pipe a value forward into a function or call expression and return the original value instead of the result. This is useful when an expression is used for its side-effect, say plotting or printing.
- lhs %$% rhs: Expose the names in lhs to the rhs expression. This is useful when functions do not have a built-in data argument.

dplyr funcitons
tbl_df() - info about dataframe
select() - select columns to work with
mutate() - add new column with new values to data frame
transmute() - add new column with new values and get rid of the rest
arrange() - reorder data by sorting columns
filter() - pick selected rows and get rid off rest
group_by() - split data into subtables based on column values
- grouping shouldn't be applied on real numbers - use only integers, factors and other discrete attributes
summarize()\summarize() - calculate summary statistics (most powerful with group_by)
n() - count all the observations in data

plotting
#this doesn't work: cars %>% plot(speed, dist, data = .)
Despite giving plot() the data frame, it will not recognize the variables for the x and y parameters, and so adding plots to pipelines requires that you use the %$% operator to give plot() access to the variables in a data frame
#this works: cars %$% plot(speed, dist, main = "Cars data", xlab = "Speed", ylab = "Stopping distance")
with %>%: cars %>% plot(dist ~ speed, data = .) #a formula needs to be specified
- plot() is a generic function - it has different functionality depending on the given parameters

ggplot2
- gives a domain specific language for creating plots
- functions from this library rather manipulate a plot by either modifying it or by adding layers
- qplot() prints the outermost level of program. If you create a plot inside a function, however, it isn’t automatically printed, and you do need to do this explicitly
- the typical pattern for using ggplot2 is to build such a ggplot object, do various operations on it to modify it, and then finally plot it by printing it
- facets (=sublots) are created by 2 functions - facet_grid() and facet_wrap()
- when facets are being used, the gather function needs to be typically used
- The geometries tell ggplot2 how you want your data mapped to visual components, like points or densities, and scales tell ggplot2 how dimensions should be visualized.
- most common functions:
	- qplot() - just for simple plotting
	- ggplot(data) - creates an object that will be plotted at the end
	- geom_point(aes(x = x_data, y = y_data, fill = , color = )) - scatter
	- geom_histogram(aes(x = x_data), bins = 10) - histogram
	- geom_smooth(method = "lm") - linear fitting and line plotting
	- geom_line(aes(x = x_data, y = y_data))
	- facet_grid(key ~ .) 
		- usually used with gather: longley %>% gather(key, value, Unemployed, Armed.Forces) %>% ... + facet_grid(key ~ .)
			· (key ~ .) will make rows of subplots
			· (. ~ key) will make columns of subplots
		- facet_grid(Measurement ~ ., scale = "free_y") - y axis is independent on each subplot
		- facet_grid(key ~ ., labeller = labeller(key = c(variable_name_a = "label_name_1")))
	- geom_boxplot(aes(x = x_data, y = y_data)) - box plot
	- scale_x_continuous("Speed", breaks = 20:50) - name of axes and ticks on the axis
	- scale_x_discrete(labels  = c("setosa" = "Setosa", "versicolor" = "Versicolor", "virginica" = "Virginica"))
	- ggtitle("Axis labels") + theme(plot.title = element_text(hjust = 0.5)) + #center the label
	- scale_fill_manual(values = c("red", "green", "blue")) - used for boxplots
	- scale_fill_brewer(palette = "Greens") - predefined palette of colors
- typical usecase: cars %>% ggplot(aes(x = speed, y = dist)) + geom_point()
